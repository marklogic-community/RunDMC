<!-- This stylesheet renders the form template generated by the xml2form code. -->
<xsl:stylesheet version="2.0"
  xmlns:fn="http://www.w3.org/2005/xpath-functions"
  xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
  xmlns:xs="http://www.w3.org/2001/XMLSchema"
  xmlns:xdmp="http://marklogic.com/xdmp"
  xmlns:map ="http://marklogic.com/xdmp/map"
  xmlns      ="http://www.w3.org/1999/xhtml"
  xmlns:xhtml="http://www.w3.org/1999/xhtml"
  xmlns:srv="http://marklogic.com/rundmc/server-urls"
  xmlns:ml               ="http://developer.marklogic.com/site/internal"
  xmlns:form             ="http://developer.marklogic.com/site/internal/form"
  xpath-default-namespace="http://developer.marklogic.com/site/internal"
  exclude-result-prefixes="xs ml xdmp map srv">

  <!-- This included stylesheet does all the heavy-lifting, i.e. everything before we start generating HTML -->
  <xsl:include href="../model/xml2form.xsl"/>

  <xsl:variable name="doc-path" select="$params[@name eq '~doc_path']"/>

  <xsl:variable name="orig-path" select="$params[@name eq '~orig_path']"/>

  <xsl:variable name="error-code" select="$params[@name eq '~error_code']"/>

  <!-- For generating a form within a page. E.g., <ml:auto-form template="Article.xml"/> -->
  <xsl:template match="auto-form">
    <xsl:apply-templates mode="generate-form" select="form:form-template(@template)"/>
  </xsl:template>

  <xsl:template mode="generate-form" match="*">
    <form class="adminform" method="post">
      <xsl:attribute name="enctype">
        <xsl:choose>
          <xsl:when test="./@form:enctype">
            <xsl:value-of select="./@form:enctype"/>
          </xsl:when>
          <xsl:otherwise>
            application/x-www-form-urlencoded
          </xsl:otherwise>
        </xsl:choose>
      </xsl:attribute>
      <input type="hidden" name="~edit_form_url" value="{$orig-path}"/>
      <input type="hidden" name="~updated" value="{xdmp:quote(.//ml:last-updated/fn:string())}"/>

      <xsl:if test="$params[@name eq '~updated']">
        <div id="codeedit">
        <dl>
          <dt>LAST SAVED</dt>
          <xsl:text> </xsl:text>
          <dd>
            <xsl:value-of select="ml:display-date-with-time($params[@name eq '~updated'])"/>
          </dd>
        </dl>
        </div>
      </xsl:if>

      <xsl:if test="$error-code">
        <div class="error">
          <strong>OOPS:</strong>
          <xsl:choose>
            <xsl:when test="$error-code eq 'no-slug'">
              You must specify a URI path.
            </xsl:when>
            <xsl:when test="$error-code eq 'doc-exists'">
              A document at this URI already exists.<br />
              Please enter a different URI path.
            </xsl:when>
          </xsl:choose>
        </div>
      </xsl:if>

      <!-- Decided against this for now.
      <xsl:choose>
        <xsl:when test="@form:uri-prefix-for-timestamped-named-docs">
          <input type="hidden" name="~timestamped-file-name" value="yes"/>
        </xsl:when>
        <xsl:otherwise>
        -->
          <div>
            <label for="slug">URI path</label>
            <strong>
              <xsl:choose>
                <xsl:when test="string($doc-path)">
                  <xsl:variable name="external-uri" select="replace($doc-path,'.xml$','')"/>
                  <xsl:value-of select="$external-uri"/>
                  <xsl:text> </xsl:text>
                  <a href="{$srv:draft-server}{$external-uri}" target="_blank">
                    <span>(view current)</span>
                  </a>
                  <xsl:text> </xsl:text>
                  <a href="{$srv:webdav-server}{$external-uri}.xml?cache-invalidate={current-dateTime()}" target="_blank">
                    <span>(view current XML source)</span>
                  </a>
                  <input type="hidden" name="~existing_doc_uri" value="{$doc-path}"/>
                </xsl:when>
                <xsl:otherwise>
                  <xsl:value-of select="/*/@form:uri-prefix-for-new-docs"/>
                  <input type="hidden" name="~uri_prefix" value="{/*/@form:uri-prefix-for-new-docs}"/>
                  <input name="~new_doc_slug" value="{$params[@name eq '~new_doc_slug']}"/> <!-- empty at first -->
                </xsl:otherwise>
              </xsl:choose>
            </strong>
          </div>
        <!--
        </xsl:otherwise>
      </xsl:choose>
      -->
      <input type="hidden" name="~xml_to_edit" value="{xdmp:quote(.)}"/>
      <xsl:apply-templates mode="labeled-controls" select="."/>
      <xsl:choose>
        <xsl:when test="string($doc-path)">
          <input type="submit" name="submitSave" class="btn btn-default btn-sm" value="Save changes" onclick="return checkValidXhtml('/admin/controller/replace.xqy', '_self');">
            <xsl:choose>
              <xsl:when test="./@form:replace-target">
                <xsl:attribute name="onclick">return checkValidXhtml('<xsl:value-of select="./@form:replace-target"/>', '_self');</xsl:attribute>
              </xsl:when>
              <xsl:otherwise>
                <xsl:attribute name="onclick">return checkValidXhtml('/admin/controller/replace.xqy', '_self');</xsl:attribute>
              </xsl:otherwise>
            </xsl:choose>
          </input>
        </xsl:when>
        <xsl:otherwise>
          <input type="submit" name="submitBtn" class="btn btn-default btn-sm" value="Submit document">
            <xsl:choose>
              <xsl:when test="./@form:create-target">
                <xsl:attribute name="onclick">return checkValidXhtml('<xsl:value-of select="./@form:create-target"/>', '_self');</xsl:attribute>
              </xsl:when>
              <xsl:otherwise>
                <xsl:attribute name="onclick">return checkValidXhtml('/admin/controller/create.xqy', '_self');</xsl:attribute>
              </xsl:otherwise>
            </xsl:choose>
          </input>
        </xsl:otherwise>
      </xsl:choose>
      <input type="submit" name="submitPreview" class="btn btn-default btn-sm" value="Preview changes" onclick="return checkValidXhtml('/admin/controller/preview.xqy', '_blank');"/>
    </form>
  </xsl:template>

  <xsl:template mode="labeled-controls" match="*">
    <xsl:apply-templates mode="#current" select="*"/>
  </xsl:template>

  <xsl:template mode="labeled-controls" match="*[@form:label][not(@form:subsequent-item)]">
    <!-- Process attribute-cum-element fields -->
    <xsl:apply-templates mode="labeled-controls" select="*"/>

    <div>
      <xsl:attribute name="class">
        <xsl:variable name="classes">
          <xsl:if test="@form:repeating eq 'yes'"> repeating</xsl:if>
          <xsl:if test="@form:optional eq 'yes' or parent::*/@form:optional eq 'yes'"> optional</xsl:if>
        </xsl:variable>
        <xsl:value-of select="normalize-space($classes)"/>
      </xsl:attribute>
      <label for="{form:field-name(.)}_{generate-id()}">
        <xsl:attribute name="name"><xsl:value-of select="form:field-name(.)"/></xsl:attribute>
        <xsl:apply-templates mode="control-label" select="."/>
      </label>
      <xsl:apply-templates mode="form-control" select="."/>
      <xsl:if test="@form:repeating eq 'yes'">
        <!-- Process the repeating controls -->
        <xsl:apply-templates mode="form-control" select="following-sibling::*[node-name(.) eq node-name(current())]"/>
      </xsl:if>
      <xsl:apply-templates mode="add-more-button" select="."/>
    </div>
  </xsl:template>

  <xsl:template mode="labeled-controls" match="*[@form:group-label]">
    <fieldset class="{form:field-name(.)}">
      <xsl:apply-templates mode="#current" select="*"/>
    </fieldset>
    <xsl:if test="form:is-last-group-in-repeating-group(.)">
      <xsl:apply-templates mode="add-more-button" select="."/>
    </xsl:if>
  </xsl:template>

  <xsl:function name="form:is-last-group-in-repeating-group" as="xs:boolean">
    <xsl:param name="e" as="element()"/>
    <xsl:sequence select="($e/@form:repeating eq 'yes') and not(node-name($e) eq node-name($e/following-sibling::*[1]))"/>
  </xsl:function>

  <xsl:template mode="add-more-button" match="*"/>
  <xsl:template mode="add-more-button" match="*[@form:repeating eq 'yes']">
    <div class="control-container">
      <a class="add_btn add_{form:field-name(.)}">
        <xsl:text>+ Add </xsl:text>
        <xsl:value-of select="@form:label | @form:group-label"/>
      </a>
    </div>
  </xsl:template>


  <xsl:template mode="remove-button" match="*"/>
  <xsl:template mode="remove-button" match="*[@form:repeating eq 'yes']">
    <a class="remove_btn remove_{form:field-name(.)}">
      <xsl:text>-&#160;Remove </xsl:text>
      <xsl:value-of select="@form:label | @form:group-label"/>
    </a>
  </xsl:template>


  <xsl:template mode="control-label" match="*">
    <xsl:value-of select="@form:label"/>
  </xsl:template>


  <xsl:template mode="form-control" match="*[exists(form:enumerated-values(.))]">
    <!-- Don't include attribute-cum-element fields in value -->
    <xsl:variable name="given-value" select="normalize-space(string-join(text(),''))"/>
    <xsl:variable name="field-name">
      <xsl:value-of select="form:field-name(.)"/>
      <xsl:apply-templates mode="field-name-suffix" select="."/>
    </xsl:variable>
    <select name="{$field-name}">
      <xsl:for-each select="form:enumerated-values(.)">
        <option value="{.}">
          <xsl:if test=". eq $given-value">
            <xsl:attribute name="selected">selected</xsl:attribute>
          </xsl:if>
          <xsl:value-of select="."/>
        </option>
      </xsl:for-each>
      <!-- If the given value is not found among the enumerated ones, don't clobber it; add it -->
      <xsl:if test="$given-value and not($given-value = form:enumerated-values(.))">
        <option value="{$given-value}" selected="selected">
          <xsl:value-of select="$given-value"/>
        </option>
      </xsl:if>
    </select>
  </xsl:template>

  <xsl:function name="form:enumerated-values" as="xs:string*">
    <xsl:param name="element"/>
    <xsl:sequence select="if ($element/@form:values)
                          then for $v in tokenize($element/@form:values,' ') return normalize-space(translate($v, '_', ' '))
                          else ()"/>
  </xsl:function>


  <xsl:template mode="form-control" match="*">
    <xsl:variable name="field-name">
      <xsl:value-of select="form:field-name(.)"/>
      <xsl:apply-templates mode="field-name-suffix" select="."/>
    </xsl:variable>
    <xsl:variable name="input-type">
      <xsl:choose>
        <xsl:when test="./@type">
          <xsl:value-of select="./@type"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:text>text</xsl:text>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <div class="control-container">
      <xsl:if test="fn:exists(text()) or fn:not((.|..)/@form:repeating eq 'yes' and (.|..)/@form:optional eq 'yes')">
        <input id ="{form:field-name(.)}_{generate-id()}"
               name="{$field-name}"
               type="{$input-type}"
               class="{form:field-name(.)}"
               value="{string-join(text(),'')}"> <!-- don't include attribute-cum-element fields in value -->
          <xsl:apply-templates mode="class-att" select="."/>
        </input>
      </xsl:if>
      <!-- TODO: allow removal for other types of controls, not just text fields -->
      <!-- Only insert one Remove button per group -->
      <xsl:if test="(not(../@form:group-label) and count(../*[node-name(.) eq node-name(current())]) gt 1)
                  or    (../@form:group-label and not(preceding-sibling::*) and count(../../*[node-name(.) eq node-name(current()/..)]) gt 1)
                  or    (./@form:optional eq 'yes')">
        <xsl:apply-templates mode="remove-button" select="ancestor-or-self::*"/>
      </xsl:if>
    </div>
  </xsl:template>

  <xsl:template mode="field-name-suffix" match="*"/>

  <xsl:template mode="field-name-suffix" match="*[(.|..)/@form:repeating eq 'yes']">
    <xsl:variable name="repeating-element" select="if (@form:repeating eq 'yes') then .
                                                                                 else .."/>
    <xsl:text>[</xsl:text>
    <xsl:number select="$repeating-element"/> <!-- position relative to its like-named siblings -->
    <xsl:text>]</xsl:text>
  </xsl:template>

  <xsl:template mode="class-att" match="*"/>
  <xsl:template mode="class-att" match="*[@form:wide eq 'yes']">
    <xsl:attribute name="class">wideText</xsl:attribute>
  </xsl:template>


  <xsl:template mode="form-control" match="*[@form:type eq 'textarea']">
    <xsl:variable name="textarea-id" select="generate-id()"/>
    <!-- TODO: Implement media library and media upload
    <input type="submit" name="add_media" value="Add media"/>
    <br/>
    -->
    <div id="control-container" style="margin-left: 112px;">
      <div id="textarea-msg"/>
      <textarea id="{form:field-name(.)}_{$textarea-id}"
                name="{form:field-name(.)}"
                style="width: 100%"
                class="{@form:class}"
                rows="{if (@form:lines) then @form:lines else 13}">
        <xsl:apply-templates mode="class-att" select="."/>
        <xsl:value-of select="string-join(text(),'')"/><!-- don't include attribute-cum-element fields in value -->
      </textarea>
      <xsl:if test="@form:class = 'richtext'">
        <br/>
        <a href="javascript:toggleEditor('{form:field-name(.)}_{$textarea-id}');">Add/Remove WYSIWYG editor</a>
      </xsl:if>
      <xsl:if test="@form:class = 'optional-richtext'">
        <br/>
        <a href="javascript:toggleEditor('{form:field-name(.)}_{$textarea-id}');">Add/Remove WYSIWYG editor</a>
      </xsl:if>
      <button type="button" class="btn btn-default btn-xs pull-right" data-toggle="modal" data-target="#media-modal">Insert Image</button>
    </div>
  </xsl:template>

  <xsl:template match="media-modal">
    <div class="modal fade" tabindex="-1" role="dialog" id="media-modal">
      <div class="modal-dialog" role="document">
        <div class="modal-content">
          <div class="modal-header">
            <button type="button" class="close" data-dismiss="modal" aria-label="Close">
              <span aria-hidden="true">x</span>
            </button>
            <h4 class="modal-title">Insert Media</h4>
          </div>
          <div class="modal-body">
            <div>
              <!-- Nav tabs -->
              <ul class="nav nav-tabs" role="tablist">
                <li role="presentation" class="active"><a href="#media-upload" aria-controls="media-upload" role="tab" data-toggle="tab">Upload</a></li>
                <li role="presentation"><a href="#media-library" aria-controls="media-library" role="tab" data-toggle="tab">Media Library</a></li>
              </ul>
              <!-- Tab panes -->
              <div class="tab-content">
                <div role="tabpanel" class="tab-pane active" id="media-upload">
                  <div>
                    <input type="file" name="content" value="Upload..."/>
                    <label class="uri-prefix">
                      <!--
                        Prefix the URI with /media and the URI of the post. For
                        instance, /media/blog/my-post/
                      -->
                      <xsl:text>/media</xsl:text>
                      <xsl:variable name="external-uri" select="replace($doc-path,'.xml$','')"/>
                      <xsl:value-of select="$external-uri"/>
                      <xsl:text>/</xsl:text>
                    </label>
                    <input type="text" name="uri"/>
                    <button class="btn btn-default btn-xs upload-image" onclick="mediaLoader.uploadImage(event);">Upload Image</button>
                  </div>
                </div>
                <div role="tabpanel" class="tab-pane" id="media-library">
                  <div class="uri-filter">
                    <span>/media/</span>
                    <input type="text" name="uri-prefix"/>
                    <button class="btn btn-default btn-xs filter" onclick="mediaLoader.getFilteredURIs(event, 'uri-prefix')">Filter</button>
                    <ul class="uris">
                    </ul>
                  </div>
                </div>
                <img src="" class="preview"/>
              </div>

            </div>
          </div>
          <div class="modal-footer">
            <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
            <button type="button" class="btn btn-primary insert" onclick="mediaLoader.insertImage()" data-dismiss="modal" disabled="disabled">Insert</button>
          </div>
        </div><!-- /.modal-content -->
      </div><!-- /.modal-dialog -->
    </div><!-- /.modal -->
  </xsl:template>

  <xsl:function name="form:field-name">
    <xsl:param name="node"/>
    <xsl:sequence select="if ($node/@form:group-label) then translate(local-name($node), '-', '_') else $node/@form:name"/>
  </xsl:function>

</xsl:stylesheet>
